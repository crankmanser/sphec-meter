; File Path: /platformio.ini

[env:esp32dev]
platform = espressif32
board = esp32dev
framework = arduino

; Make the upload protocol explicit and set a robust reset method.
; 'dio' uses the DTR and RTS serial lines to automatically reset the ESP32
; into bootloader mode, which is more reliable for some boards and drivers
; and resolves the generic "[upload] Error 2".
upload_protocol = esptool
upload_resetmethod = dio

; Instructs PlatformIO to automatically detect the serial port for uploading.
; This resolves the "Please specify 'upload_port'" error.
upload_port = AUTO

; Set the Library Dependency Finder (LDF) mode to deep+.
; This is a crucial setting that instructs PlatformIO to recursively scan all
; library directories to find dependencies. It ensures that a local library,
; like our SdManager, can correctly find and include the header from another
; local library, like our Storage interface.
lib_ldf_mode = deep+

monitor_speed = 115200

lib_deps =
    bblanchon/ArduinoJson@^6.19.4
    greiman/SdFat@^2.3.0 
    SPI
    Wire
    adafruit/Adafruit GFX Library@^1.11.3
    adafruit/Adafruit SSD1306@^2.5.7
    adafruit/DHT sensor library@^1.4.4
    adafruit/Adafruit INA219@^1.1.1
    paulstoffregen/OneWire@^2.3.7
    milesburton/DallasTemperature@^3.11.0
    adafruit/RTClib@^2.1.1
    madhephaestus/ESP32Encoder@^0.10.2

; We explicitly add "-I include" to the build flags.
; This command forces the GCC compiler to add the project's 'include'
; directory to its search path for header files. This is a robust
; way to ensure that shared header files, like ProjectConfig.h,
; are found by the compiler, resolving the "No such file or directory"
; error that was occurring during the test build for the DisplayManager.
build_flags =
    -I include
    ; Tell SdFat that we are providing a custom configuration file.
    -D SD_FAT_CONFIG_INCLUDED
    -DARDUINO_ARCH_ESP32
    -DCORE_DEBUG_LEVEL=0

; This setting is critical for unit testing.
; By setting this to "yes", we ensure that the libraries in the `lib` directory
; are compiled and linked with the test firmware. This is necessary because
; our unit tests directly depend on the code in the cabinets (e.g., FaultHandler,
; ConfigManager), which reside in the `lib` folder. Without this, the linker
; cannot find the definitions for the cabinet classes and methods, resulting
; in build failures.
test_build_src = yes